{"version":3,"file":"static/js/195.257dcad8.chunk.js","mappings":"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","sources":["pages/Contacts-page/ContactsPage.styled.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/Contact.styled.jsx","components/ContactList/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts-page/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst Title = styled.h1`\n  text-align: center;\n  margin: 15px 0 30px;\n  font-weight: 900;\n  font-size: 2em;\n  font-family: 'Lexend Peta', sans-serif;\n`;\nconst SubTitle = styled.h2`\n  text-align: center;\n  margin: 15px 0 30px;\n  font-weight: 900;\n  font-size: 2em;\n  font-family: 'Lexend Peta', sans-serif;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  max-width: 1000px;\n  margin: 0 auto;\n  gap: 30px;\n`;\n\nconst Wrap = styled.div``;\n\nexport { Title, Container, Wrap, SubTitle };\n","import styled from 'styled-components';\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 350px;\n  padding: 20px;\n  background-color: #f5f5f5;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n`;\n\nconst Label = styled.label`\n  font-size: 16px;\n  font-weight: bold;\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n`;\n\nconst Input = styled.input`\n  padding: 10px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  margin-bottom: 20px;\n`;\n\nconst Button = styled.button`\n  font-family: 'Lexend Peta', sans-serif;\n  background-color: #fdc886;\n  color: #000000;\n  padding: 10px;\n  font-size: 16px;\n\n  border: none;\n  border-radius: 10px;\n  transition: background-color 300ms linear;\n  &:hover {\n    background-color: #cfd382;\n  }\n`;\n\nexport { Input, Form, Label, Button };\n","import { useState } from 'react';\nimport { Input, Form, Label, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactSelector } from 'store/selectors';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\nimport { postContactsThunk } from 'store/contacts/contactsThunks';\n\nfunction ContactForm() {\n  const { contacts } = useSelector(contactSelector);\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const nameRegex =\n    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n  /* ---------------------------------- CLEAN --------------------------------- */\n  const cleanField = () => {\n    setName('');\n    setNumber('');\n  };\n  /* --------------------------------- SUBMIT --------------------------------- */\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.find(contact => contact.name === name)) {\n      toast.error(`${name} is already in your contacts!`);\n      return;\n    } else if (!nameRegex.test(name) || name.length <= 2) {\n      toast.error(\n        `${name} is invalid name! Add at least 3 letters without numbers`\n      );\n      return;\n    } else {\n      const newContact = {\n        id: nanoid(15),\n        name,\n        number,\n      };\n      dispatch(postContactsThunk(newContact));\n    }\n    cleanField();\n  };\n  /* --------------------------------- RENDER --------------------------------- */\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"/^([A-Za-z\\-\\']{1,50})|([А-Яа-я\\-\\']{1,50})$/\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={name}\n          onChange={e => setName(e.currentTarget.value)}\n          required\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={number}\n          onChange={e => setNumber(e.currentTarget.value)}\n          required\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n}\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nconst Notification = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f8d7da;\n  color: #721c24;\n  border-radius: 5px;\n  font-size: 23px;\n  font-weight: bold;\n  margin-top: 20px;\n  padding: 20px;\n  min-width: 300px;\n`;\nconst ContactWrap = styled.div``;\nconst List = styled.ul`\n  padding: 0;\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  width: 600px;\n  padding: 20px;\n  background-color: #f5f5f5;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n`;\n\nconst Items = styled.li`\n  margin-bottom: 10px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nconst Name = styled.p`\n  font-weight: bold;\n  font-family: 'Lexend Peta', sans-serif;\n  margin-right: 10px;\n`;\n\nconst Number = styled.p`\n  font-size: 14px;\n  font-family: 'Lexend Peta', sans-serif;\n  color: gray;\n`;\n\nconst DeleteButton = styled.button`\n  background-color: #f75252;\n  color: #000000;\n  border: none;\n  font-family: 'Lexend Peta', sans-serif;\n  border-radius: 10px;\n  padding: 6px 10px;\n  font-size: 14px;\n  width: 85px;\n`;\nconst EditButton = styled.button`\n  background-color: #eefc73;\n  color: #000000;\n  border: none;\n  border-radius: 10px;\n  padding: 6px 10px;\n  font-size: 14px;\n\n  font-family: 'Lexend Peta', sans-serif;\n  width: 85px;\n`;\nconst BtnWrap = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-left: auto;\n  margin-right: 0;\n`;\nconst Input = styled.input`\n  padding: 10px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  max-width: 150px;\n  margin-right: 6px;\n`;\nexport {\n  List,\n  Items,\n  Name,\n  Number,\n  DeleteButton,\n  Container,\n  EditButton,\n  BtnWrap,\n  Input,\n  ContactWrap,\n  Notification,\n};\n","import { PropTypes } from 'prop-types';\nimport {\n  Name,\n  Number,\n  DeleteButton,\n  Container,\n  EditButton,\n  BtnWrap,\n  Input,\n} from './Contact.styled';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteContactsThunk,\n  putContactsThunk,\n} from 'store/contacts/contactsThunks';\nimport { toast } from 'react-toastify';\n\nconst ContactListItem = props => {\n  /* ---------------------------------- STATE --------------------------------- */\n  const [isEdit, setIsEdit] = useState(false);\n  const dispatch = useDispatch();\n  const [name, setName] = useState(props.name);\n  const [number, setNumber] = useState(props.number);\n  /* ------------------------------- HANDLE EDIT ------------------------------ */\n  const handleEdit = () => {\n    if (isEdit) {\n      const nameRegex =\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n      if (!nameRegex.test(name) || name.length <= 2) {\n        toast.error(\n          `${name} is invalid name! Add at least 3 letters without numbers`\n        );\n        return;\n      }\n      const numberRegex =\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n      if (!numberRegex.test(number)) {\n        toast.error(`${number} is invalid number`);\n        return;\n      }\n      if (name !== props.name || number !== props.number) {\n        const updatedContact = {\n          id: props.id,\n          name,\n          number,\n        };\n        dispatch(putContactsThunk(updatedContact));\n      }\n    }\n    setIsEdit(prev => !prev);\n  };\n  /* --------------------------------- RENDER --------------------------------- */\n  return (\n    <Container>\n      {isEdit ? (\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          placeholder=\"Name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={name}\n          onChange={e => setName(e.currentTarget.value)}\n          required\n        />\n      ) : (\n        <Name>{props.name}:</Name>\n      )}\n\n      {isEdit ? (\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          placeholder=\"Number\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={number}\n          onChange={e => setNumber(e.currentTarget.value)}\n          required\n        />\n      ) : (\n        <Number>{props.number}</Number>\n      )}\n      <BtnWrap>\n        {!isEdit && (\n          <DeleteButton\n            type=\"button\"\n            onClick={() => dispatch(deleteContactsThunk(props.id))}\n          >\n            Delete\n          </DeleteButton>\n        )}\n        <EditButton\n          type={isEdit ? 'submit' : 'button'}\n          onClick={() => handleEdit()}\n        >\n          {isEdit ? 'Save' : 'Edit'}\n        </EditButton>\n      </BtnWrap>\n    </Container>\n  );\n};\n\nContactListItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactListItem;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { List, Items, Notification, ContactWrap } from './Contact.styled';\nimport ContactListItem from './ContactItem';\nimport { contactSelector, filterSelector } from 'store/selectors';\nimport { useEffect } from 'react';\nimport { getContactsThunk } from 'store/contacts/contactsThunks';\n\nconst ContactList = () => {\n  const { contacts } = useSelector(contactSelector);\n  const filter = useSelector(filterSelector);\n  const dispatch = useDispatch();\n  /* -------------------------------------------------------------------------- */\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n  /* -------------------------- GET FILTERED CONTACTS ------------------------- */\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n  const filteredArr = getFilteredContacts();\n  /* -------------------------------------------------------------------------- */\n  return (\n    <ContactWrap>\n      {filteredArr.length > 0 ? (\n        <List>\n          {filteredArr.map(({ id, name, number }) => (\n            <Items key={id}>\n              <ContactListItem id={id} name={name} number={number} />\n            </Items>\n          ))}\n        </List>\n      ) : (\n        <Notification>You don't have contacts</Notification>\n      )}\n    </ContactWrap>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  max-width: 600px;\n  flex-direction: column;\n`;\n\nconst TextFilter = styled.p`\n  color: black;\n  font-size: 16px;\n  font-weight: 500;\n  margin: 0 0 5px 0;\n  font-family: 'Lexend Peta', sans-serif;\n  text-transform: uppercase;\n`;\n\nconst InputFilter = styled.input`\n  border: none;\n  border-bottom: 2px solid #7d7a7a;\n  padding: 6px 20px;\n  font-size: 16px;\n  &:focus {\n    border-color: #12d400;\n    outline: none;\n  }\n`;\nexport { Container, TextFilter, InputFilter };\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Container, TextFilter, InputFilter } from './Filter.styled';\nimport { filterSelector } from 'store/selectors';\nimport { changeFilter } from 'store/filterSlice';\n\nconst Filter = () => {\n  const filter = useSelector(filterSelector);\n  const dispatch = useDispatch();\n  /* ------------------------------ CHANGE FILTER ----------------------------- */\n  const onChange = e => dispatch(changeFilter(e.currentTarget.value));\n  /* -------------------------------------------------------------------------- */\n  return (\n    <Container>\n      <TextFilter>Find contacts by name</TextFilter>\n      <InputFilter\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onChange}\n      />\n    </Container>\n  );\n};\n\nexport default Filter;\n","import { SubTitle, Title, Wrap, Container } from './ContactsPage.styled';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport React from 'react';\n\nconst ContactsPage = () => {\n  return (\n    <Container>\n      <Wrap>\n        <Title>Phonebook</Title>\n        <ContactForm />\n      </Wrap>\n      <Wrap>\n        <SubTitle>Contacts</SubTitle>\n        <Filter />\n        <ContactList></ContactList>\n      </Wrap>\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["Title","styled","SubTitle","Container","Wrap","Form","Label","Input","Button","contacts","useSelector","contactSelector","dispatch","useDispatch","useState","name","setName","number","setNumber","nameRegex","onSubmit","e","preventDefault","find","contact","toast","test","length","newContact","id","nanoid","postContactsThunk","type","pattern","title","value","onChange","currentTarget","required","Notification","ContactWrap","List","Items","Name","Number","DeleteButton","EditButton","BtnWrap","props","isEdit","setIsEdit","placeholder","onClick","deleteContactsThunk","updatedContact","putContactsThunk","prev","handleEdit","filter","filterSelector","useEffect","getContactsThunk","filteredArr","normalizedFilter","toLowerCase","includes","getFilteredContacts","map","TextFilter","InputFilter","changeFilter"],"sourceRoot":""}